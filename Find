#include <iostream>
#include <string>
#include <sys/stat.h>
#include <windows.h>

#ifndef INVALID_FILE_ATTRIBUTES
constexpr INVALID_FILE_ATTRIBUTES((DWORD) - 1)
#endif

BOOL IsDir(const std::string &path)
{
DWORD Attr;

Attr = GetFileAttributes(path.c_str());
if (Attr == INVALID_FILE_ATTRIBUTES)
    return FALSE;

return (BOOL)(Attr & FILE_ATTRIBUTE_DIRECTORY);
}

std::string sanitizePath(const std::string &path)
{
std::string fspath = path;

while (*(fspath.rbegin()) == '/' || *(fspath.rbegin()) == '\\')
    fspath.pop_back();

return fspath;
}

int findFiles(std::string &fspath, const std::string &fs)
{
static size_t i = 0;
WIN32_FIND_DATA FindFileData;

std::string destpath = fspath + std::string("\\*.*");

HANDLE hFind = FindFirstFile(destpath.c_str(), &FindFileData);

if (hFind != INVALID_HANDLE_VALUE)
    do {
        std::string fullpath = std::string(fspath) + std::string("\\") + std::string(FindFileData.cFileName);

        if (*(fullpath.rbegin()) == '.')
            continue;
        else if (FindFileData.dwFileAttributes &FILE_ATTRIBUTE_DIRECTORY)
            findFiles(fullpath, fs);
        else
        {
            if (FindFileData.cFileName == fs)
            {
                std::cout << fs << " was found in -> " << fspath << std::endl;
                i++;
            }
        }
    } while (FindNextFile(hFind, &FindFileData));

FindClose(hFind);
return i;
}

int main(int argc, char **argv)
{
if (argc <= 2)
{
    std::cerr << "No path or filename provided" << std::endl;
    return EXIT_FAILURE;
}

const char *path = argv[1];
const char *fileSearched = argv[2];

if (!IsDir(path))
{
    std::cerr << "Path doesn't exist" << std::endl;
    return EXIT_FAILURE;
}

std::string fspath = sanitizePath(path);
std::string fs = fileSearched;

std::cout << "Searching " << fspath << " and its subdirectories" << std::endl;

int i = findFiles(fspath, fs);

if (i == 0)
    std::cout << fs << " was not found in " << fspath << " or its subdirectories" << std::endl;
else if (i == 1)
    std::cout << fs << " was found once";
else
{
    std::cout << fs << " was found " << i << " times" << std::endl;
    std::cout << "Beware same filename does NOT automatically mean same file content." << std::endl;
}

return EXIT_SUCCESS;
}
